/*
 * Copyright 2014 Higher Frequency Trading
 *
 * http://www.higherfrequencytrading.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yahoo.ycsb.generator;

import java.util.concurrent.CopyOnWriteArrayList;

import com.yahoo.ycsb.Utils;
import com.yahoo.ycsb.WorkloadException;

/**
 * Generates a distribution by choosing from a discrete set of values.
 */
public class DiscreteGenerator extends Generator
{
	class Pair
	{
		public double _weight;
		public String _value;

		Pair(double weight, String value)
		{
			_weight=weight;
			_value=value;
		}
	}

	final CopyOnWriteArrayList<Pair> _values;
    double _valueSum = 0;
	String _lastvalue;

	public DiscreteGenerator()
	{
		_values=new CopyOnWriteArrayList<Pair>();
		_lastvalue=null;
	}

	/**
	 * Generate the next string in the distribution.
	 */
	public String nextString()
	{
        double val=Utils.random().nextInt(100)/100.0 * _valueSum;

        for (int i = 1; i < _values.size(); i++) {
            Pair p = _values.get(i);
            if (val < p._weight) {
                return p._value;
            }

            val -= p._weight;
        }
        return _values.get(0)._value;
	}

	/**
	 * If the generator returns numeric (integer) values, return the next value as an int. Default is to return -1, which
	 * is appropriate for generators that do not return numeric values.
	 * 
	 * @throws WorkloadException if this generator does not support integer values
	 */
	public int nextInt() throws WorkloadException
	{
		throw new WorkloadException("DiscreteGenerator does not support nextInt()");
	}

	/**
	 * Return the previous string generated by the distribution; e.g., returned from the last nextString() call. 
	 * Calling lastString() should not advance the distribution or have any side effects. If nextString() has not yet 
	 * been called, lastString() should return something reasonable.
	 */
	public String lastString()
	{
		if (_lastvalue==null)
		{
			_lastvalue=nextString();
		}
		return _lastvalue;
	}

	public void addValue(double weight, String value)
	{
		_values.add(new Pair(weight,value));
        _valueSum += weight;
	}

}
